# -*- mode: org; -*-
* DONE yes, the database is itself a "realm"?
  CLOSED: [2011-04-05 Tue 17:54]
  and that's how we'd handle multiple users with identical names?
* DONE test behavior of timestamp and NULL
  CLOSED: [2011-04-05 Tue 16:20]
  - CLOSING NOTE [2011-04-05 Tue 16:21] \\
    can do it using a trigger; but have to specify the timestamp,
    nevertheless (simply updating it with NULL does not trigger a
    recalculation of the DEFAULT).
  #+BEGIN_SRC sqlite :tangle test-null-timestamp.sql
    DROP TABLE IF EXISTS test;
    CREATE TABLE test (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           payload,
           timestamp INTEGER DEFAULT (strftime('%s', 'now')) NOT NULL
    );
    
    CREATE TRIGGER update_timestamp UPDATE ON test
           BEGIN
            UPDATE test SET timestamp = strftime('%s', 'now')
            WHERE rowid = new.rowid;
           END;
    
    INSERT INTO test(id) values(NULL);
    INSERT INTO test(id) values(NULL);
    SELECT timestamp FROM test;
    
  #+END_SRC

  #+BEGIN_SRC sqlite :tangle test-null-timestamp-after-sleep.sql
    UPDATE test SET payload = 'omg' where ID = 1;
    SELECT timestamp FROM test;
  #+END_SRC
* DONE add timestamp
  CLOSED: [2011-03-31 Thu 19:50]
  #+BEGIN_SRC sqlite :tangle add-timestamp.sql
    CREATE TEMPORARY TABLE add_timestamp (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           user TEXT KEY,
           salt TEXT,
           role TEXT,
           hash TEXT
    );
    INSERT INTO add_timestamp SELECT * FROM auth;
    
    DROP TABLE IF EXISTS auth;
    CREATE TABLE auth (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           user TEXT KEY,
           salt TEXT,
           role TEXT,
           hash TEXT,
           timestamp INTEGER DEFAULT (strftime('%s', 'now'))
    );
    
    INSERT INTO auth (id, user, salt, role, hash) SELECT
           id,
           user,
           salt,
           role,
           hash
           FROM add_timestamp;
  #+END_SRC
* DONE test
  CLOSED: [2010-07-05 Mon 15:43]
  #+BEGIN_SRC scheme
    (load "auth.scm")
    (use auth
         call-with-connection
         debug
         test)
    
    (call-with-connection
     "auth.db"
     (lambda (connection)
       (create connection "user" "pass" "realm")
       (test-assert
        "retrieve with credentials"
        (read connection "user" "pass" "realm"))
       (test-assert
        "false user"
        (not (read connection "false-user" "pass" "realm")))
       (test-assert
        "false pass"
        (not (read connection "user" "false-pass" "realm")))
       (test-assert
        "false realm"
        (not (read connection "user" "pass" "false-realm")))
       (update connection "user" "pass2" "realm")
       (test-assert
        "retrieve with updated credentials"
        (read connection "user" "pass2" "realm"))))  
  #+END_SRC
* CANCELED it seems like this could be a datagrid app
  CLOSED: [2010-07-05 Mon 15:43]
  especially after we write some hooks. that would relieve me from
  coming up with an interface. we need an interface anyway, though,
  for users.
* CANCELED we might as well just use srfi-69 as the database
  CLOSED: [2010-07-05 Mon 15:43]
  why do some dumbass sqlite3-thing? what are we indexing by: user?
  problem is: how do we serialize a srfi-69 hash-table? right: use
  fucking alists.

  where's our fucking alist-lib, again? jesus, we need that thing.

  oh, shit: on the other hand, we're going to incur this penalty every
  read! we need something spritely, then. damn; also: usernames are
  going to have to be unique across domains unless we do something
  clever. damn, i really don't want to have to program this.
